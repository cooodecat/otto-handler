/**
 * @packageDocumentation
 * @module api.functional.logs.executions.status
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { Recordstringany } from "../../../../structures/Recordstringany";

/**
 * @tag logs
 * @summary Update execution status
 * @throws 400 Invalid execution ID or status
 * @throws 401 인증 실패
 * @throws 404 Execution not found
 * @controller LogsController.updateExecutionStatus
 * @path PATCH /logs/executions/:executionId/status
 * @accessor api.functional.logs.executions.status.updateExecutionStatus
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function updateExecutionStatus(
  connection: IConnection,
  executionId: string,
  body: updateExecutionStatus.Body,
): Promise<updateExecutionStatus.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...updateExecutionStatus.METADATA,
      template: updateExecutionStatus.METADATA.path,
      path: updateExecutionStatus.path(executionId),
    },
    body,
  );
}
export namespace updateExecutionStatus {
  export type Body = {
    status: string;
    metadata?: undefined | Recordstringany;
    errorMessage?: undefined | string;
    archiveUrl?: undefined | string;
    completedAt?: undefined | string;
  };
  export type Output = {
    success: boolean;
    message: string;
  };

  export const METADATA = {
    method: "PATCH",
    path: "/logs/executions/:executionId/status",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (executionId: string) =>
    `/logs/executions/${encodeURIComponent(executionId?.toString() ?? "null")}/status`;
}
