/**
 * @packageDocumentation
 * @module api.functional.logs.executions.logs
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { LogQueryDto } from "../../../../structures/LogQueryDto";

/**
 * @controller LogsController.getExecutionLogs
 * @path GET /logs/executions/:id/logs
 * @accessor api.functional.logs.executions.logs.getExecutionLogs
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getExecutionLogs(
  connection: IConnection,
  id: string,
  query: getExecutionLogs.Query,
): Promise<getExecutionLogs.Output> {
  return PlainFetcher.fetch(connection, {
    ...getExecutionLogs.METADATA,
    template: getExecutionLogs.METADATA.path,
    path: getExecutionLogs.path(id, query),
  });
}
export namespace getExecutionLogs {
  export type Query = LogQueryDto;
  export type Output = any;

  export const METADATA = {
    method: "GET",
    path: "/logs/executions/:id/logs",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string, query: Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/logs/executions/${encodeURIComponent(id?.toString() ?? "null")}/logs`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}
