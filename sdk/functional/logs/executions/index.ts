/**
 * @packageDocumentation
 * @module api.functional.logs.executions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Format } from "typia/lib/tags/Format";

import type { Recordstringany } from "../../../structures/Recordstringany";

export * as details from "./details/index";
export * as status from "./status/index";
export * as recover_missing_logs from "./recover_missing_logs/index";
export * as check_stale from "./check_stale/index";

/**
 * @tag logs
 * @summary Get execution logs by execution ID
 * @throws 400 Invalid execution ID
 * @throws 401 인증 실패
 * @throws 404 Execution not found
 * @controller LogsController.getExecutionLogs
 * @path GET /logs/executions/:executionId
 * @accessor api.functional.logs.executions.getExecutionLogs
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getExecutionLogs(
  connection: IConnection,
  executionId: string,
  query: getExecutionLogs.Query,
): Promise<getExecutionLogs.Output> {
  return PlainFetcher.fetch(connection, {
    ...getExecutionLogs.METADATA,
    template: getExecutionLogs.METADATA.path,
    path: getExecutionLogs.path(executionId, query),
  });
}
export namespace getExecutionLogs {
  export type Query = {
    limit?: undefined | number;
    offset?: undefined | number;
    level?: undefined | string;
  };
  export type Output = {
    logs: {
      timestamp: string;
      message: string;
      level: string;
      phase?: null | undefined | string;
      step?: null | undefined | string;
    }[];
    pagination: {
      limit: number;
      offset: number;
      total: number;
    };
  };

  export const METADATA = {
    method: "GET",
    path: "/logs/executions/:executionId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (executionId: string, query: Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = `/logs/executions/${encodeURIComponent(executionId?.toString() ?? "null")}`;
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}

/**
 * @tag logs
 * @summary Get all executions with filters
 * @throws 401 인증 실패
 * @controller LogsController.getExecutions
 * @path GET /logs/executions
 * @accessor api.functional.logs.executions.getExecutions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getExecutions(
  connection: IConnection,
  query: getExecutions.Query,
): Promise<getExecutions.Output> {
  return PlainFetcher.fetch(connection, {
    ...getExecutions.METADATA,
    template: getExecutions.METADATA.path,
    path: getExecutions.path(query),
  });
}
export namespace getExecutions {
  export type Query = {
    status?: undefined | string;
    executionType?: undefined | string;
    pipelineId?: undefined | string;
    projectId?: undefined | string;
    limit?: undefined | number;
    offset?: undefined | number;
  };
  export type Output = {
    executionId: string;
    pipelineId: string;
    projectId: string;
    executionType: string;
    status: string;
    awsBuildId?: null | undefined | string;
    awsDeploymentId?: null | undefined | string;
    logStreamName?: null | undefined | string;
    metadata?: null | undefined | Recordstringany;
    startedAt: string & Format<"date-time">;
    completedAt?: null | undefined | (string & Format<"date-time">);
    updatedAt: string & Format<"date-time">;
    isArchived: boolean;
    archiveUrl?: null | undefined | string;
    logCount: number;
  }[];

  export const METADATA = {
    method: "GET",
    path: "/logs/executions",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (query: Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/logs/executions";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}
