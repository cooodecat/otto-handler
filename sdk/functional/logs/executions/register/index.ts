/**
 * @packageDocumentation
 * @module api.functional.logs.executions.register
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { ExecutionResponseDto } from "../../../../structures/ExecutionResponseDto";
import type { RegisterExecutionDto } from "../../../../structures/RegisterExecutionDto";

/**
 * @controller LogsController.registerExecution
 * @path POST /logs/executions/register
 * @accessor api.functional.logs.executions.register.registerExecution
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function registerExecution(
  connection: IConnection,
  dto: registerExecution.Body,
): Promise<registerExecution.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...registerExecution.METADATA,
      template: registerExecution.METADATA.path,
      path: registerExecution.path(),
    },
    dto,
  );
}
export namespace registerExecution {
  export type Body = RegisterExecutionDto;
  export type Output = ExecutionResponseDto;

  export const METADATA = {
    method: "POST",
    path: "/logs/executions/register",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/logs/executions/register";
}
