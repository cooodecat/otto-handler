/**
 * @packageDocumentation
 * @module api.functional.logs.executions.archive_url
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

/**
 * @controller LogsController.getArchiveUrl
 * @path GET /logs/executions/:id/archive-url
 * @accessor api.functional.logs.executions.archive_url.getArchiveUrl
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getArchiveUrl(
  connection: IConnection,
  id: string,
): Promise<getArchiveUrl.Output> {
  return PlainFetcher.fetch(connection, {
    ...getArchiveUrl.METADATA,
    template: getArchiveUrl.METADATA.path,
    path: getArchiveUrl.path(id),
  });
}
export namespace getArchiveUrl {
  export type Output = any;

  export const METADATA = {
    method: "GET",
    path: "/logs/executions/:id/archive-url",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (id: string) =>
    `/logs/executions/${encodeURIComponent(id?.toString() ?? "null")}/archive-url`;
}
