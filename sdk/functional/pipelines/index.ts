/**
 * @packageDocumentation
 * @module api.functional.pipelines
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { CreatePipelineRequestDto } from "../../structures/CreatePipelineRequestDto";
import type { GetPipelinesRequestDto } from "../../structures/GetPipelinesRequestDto";
import type { PipelineResponseDto } from "../../structures/PipelineResponseDto";
import type { UpdatePipelineRequestDto } from "../../structures/UpdatePipelineRequestDto";

export * as projects from "./projects/index";
export * as execute from "./execute/index";
export * as builds from "./builds/index";
export * as deployment from "./deployment/index";

/**
 * @tag pipeline
 * @summary 파이프라인 생성
 * @throws 400 잘못된 요청
 * @throws 401 인증 실패
 * @throws 404 프로젝트를 찾을 수 없음
 * @controller PipelineController.createPipeline
 * @path POST /pipelines
 * @accessor api.functional.pipelines.createPipeline
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function createPipeline(
  connection: IConnection,
  createPipelineDto: createPipeline.Body,
): Promise<createPipeline.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...createPipeline.METADATA,
      template: createPipeline.METADATA.path,
      path: createPipeline.path(),
    },
    createPipelineDto,
  );
}
export namespace createPipeline {
  export type Body = CreatePipelineRequestDto;
  export type Output = PipelineResponseDto;

  export const METADATA = {
    method: "POST",
    path: "/pipelines",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/pipelines";
}

/**
 * @tag pipeline
 * @summary 파이프라인 목록 조회
 * @throws 401 인증 실패
 * @controller PipelineController.getPipelines
 * @path GET /pipelines
 * @accessor api.functional.pipelines.getPipelines
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getPipelines(
  connection: IConnection,
  query: getPipelines.Query,
): Promise<getPipelines.Output> {
  return PlainFetcher.fetch(connection, {
    ...getPipelines.METADATA,
    template: getPipelines.METADATA.path,
    path: getPipelines.path(query),
  });
}
export namespace getPipelines {
  export type Query = GetPipelinesRequestDto;
  export type Output = PipelineResponseDto[];

  export const METADATA = {
    method: "GET",
    path: "/pipelines",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (query: Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(query as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/pipelines";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}

/**
 * @tag pipeline
 * @summary 특정 파이프라인 조회
 * @throws 401 인증 실패
 * @throws 404 파이프라인을 찾을 수 없음
 * @controller PipelineController.getPipelineById
 * @path GET /pipelines/:pipelineId
 * @accessor api.functional.pipelines.getPipelineById
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getPipelineById(
  connection: IConnection,
  pipelineId: string,
): Promise<getPipelineById.Output> {
  return PlainFetcher.fetch(connection, {
    ...getPipelineById.METADATA,
    template: getPipelineById.METADATA.path,
    path: getPipelineById.path(pipelineId),
  });
}
export namespace getPipelineById {
  export type Output = PipelineResponseDto;

  export const METADATA = {
    method: "GET",
    path: "/pipelines/:pipelineId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (pipelineId: string) =>
    `/pipelines/${encodeURIComponent(pipelineId?.toString() ?? "null")}`;
}

/**
 * @tag pipeline
 * @summary 파이프라인 업데이트
 * @throws 400 잘못된 요청
 * @throws 401 인증 실패
 * @throws 404 파이프라인을 찾을 수 없음
 * @controller PipelineController.updatePipeline
 * @path PATCH /pipelines/:pipelineId
 * @accessor api.functional.pipelines.updatePipeline
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function updatePipeline(
  connection: IConnection,
  pipelineId: string,
  updatePipelineDto: updatePipeline.Body,
): Promise<updatePipeline.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...updatePipeline.METADATA,
      template: updatePipeline.METADATA.path,
      path: updatePipeline.path(pipelineId),
    },
    updatePipelineDto,
  );
}
export namespace updatePipeline {
  export type Body = UpdatePipelineRequestDto;
  export type Output = PipelineResponseDto;

  export const METADATA = {
    method: "PATCH",
    path: "/pipelines/:pipelineId",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (pipelineId: string) =>
    `/pipelines/${encodeURIComponent(pipelineId?.toString() ?? "null")}`;
}

/**
 * @tag pipeline
 * @summary 파이프라인 삭제
 * @throws 401 인증 실패
 * @throws 404 파이프라인을 찾을 수 없음
 * @controller PipelineController.deletePipeline
 * @path DELETE /pipelines/:pipelineId
 * @accessor api.functional.pipelines.deletePipeline
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function deletePipeline(
  connection: IConnection,
  pipelineId: string,
): Promise<void> {
  return PlainFetcher.fetch(connection, {
    ...deletePipeline.METADATA,
    template: deletePipeline.METADATA.path,
    path: deletePipeline.path(pipelineId),
  });
}
export namespace deletePipeline {
  export const METADATA = {
    method: "DELETE",
    path: "/pipelines/:pipelineId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 204,
  } as const;

  export const path = (pipelineId: string) =>
    `/pipelines/${encodeURIComponent(pipelineId?.toString() ?? "null")}`;
}
