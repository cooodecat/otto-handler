/**
 * @packageDocumentation
 * @module api.functional.pipelines.builds.status
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Format } from "typia/lib/tags/Format";

/**
 * @tag pipeline
 * @summary 빌드 상태 조회
 * @throws 401 인증 실패
 * @throws 404 파이프라인 또는 빌드를 찾을 수 없음
 * @controller PipelineController.getBuildStatus
 * @path GET /pipelines/:pipelineId/builds/:buildId/status
 * @accessor api.functional.pipelines.builds.status.getBuildStatus
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getBuildStatus(
  connection: IConnection,
  pipelineId: string,
  buildId: string,
): Promise<getBuildStatus.Output> {
  return PlainFetcher.fetch(connection, {
    ...getBuildStatus.METADATA,
    template: getBuildStatus.METADATA.path,
    path: getBuildStatus.path(pipelineId, buildId),
  });
}
export namespace getBuildStatus {
  export type Output = {
    buildStatus: string;
    currentPhase?: undefined | string;
    startTime?: undefined | (string & Format<"date-time">);
    endTime?: undefined | (string & Format<"date-time">);
    logs?:
      | undefined
      | {
          groupName?: undefined | string;
          streamName?: undefined | string;
        };
  };

  export const METADATA = {
    method: "GET",
    path: "/pipelines/:pipelineId/builds/:buildId/status",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (pipelineId: string, buildId: string) =>
    `/pipelines/${encodeURIComponent(pipelineId?.toString() ?? "null")}/builds/${encodeURIComponent(buildId?.toString() ?? "null")}/status`;
}
