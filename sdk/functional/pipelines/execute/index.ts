/**
 * @packageDocumentation
 * @module api.functional.pipelines.execute
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

/**
 * @tag pipeline
 * @summary 파이프라인 빌드 실행
 * @throws 400 CodeBuild 프로젝트가 설정되지 않음
 * @throws 401 인증 실패
 * @throws 404 파이프라인을 찾을 수 없음
 * @controller PipelineController.executePipeline
 * @path POST /pipelines/:pipelineId/execute
 * @accessor api.functional.pipelines.execute.executePipeline
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function executePipeline(
  connection: IConnection,
  pipelineId: string,
): Promise<executePipeline.Output> {
  return PlainFetcher.fetch(connection, {
    ...executePipeline.METADATA,
    template: executePipeline.METADATA.path,
    path: executePipeline.path(pipelineId),
  });
}
export namespace executePipeline {
  export type Output = {
    buildId: string;
    buildNumber: string;
    imageTag: string;
    ecrImageUri: string;
  };

  export const METADATA = {
    method: "POST",
    path: "/pipelines/:pipelineId/execute",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (pipelineId: string) =>
    `/pipelines/${encodeURIComponent(pipelineId?.toString() ?? "null")}/execute`;
}
