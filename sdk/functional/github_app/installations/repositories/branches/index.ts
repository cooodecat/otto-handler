/**
 * @packageDocumentation
 * @module api.functional.github_app.installations.repositories.branches
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { GithubBranchResponseDto } from "../../../../../structures/GithubBranchResponseDto";

/**
 * @tag github-app
 * @summary 특정 리포지토리의 브랜치 목록 조회
 * @throws 401 인증 실패
 * @throws 404 Repository를 찾을 수 없음
 * @controller GithubAppController.getRepositoryBranches
 * @path GET /github-app/installations/:installationId/repositories/:owner/:repo/branches
 * @accessor api.functional.github_app.installations.repositories.branches.getRepositoryBranches
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getRepositoryBranches(
  connection: IConnection,
  installationId: string,
  owner: string,
  repo: string,
): Promise<getRepositoryBranches.Output> {
  return PlainFetcher.fetch(connection, {
    ...getRepositoryBranches.METADATA,
    template: getRepositoryBranches.METADATA.path,
    path: getRepositoryBranches.path(installationId, owner, repo),
  });
}
export namespace getRepositoryBranches {
  export type Output = GithubBranchResponseDto[];

  export const METADATA = {
    method: "GET",
    path: "/github-app/installations/:installationId/repositories/:owner/:repo/branches",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (installationId: string, owner: string, repo: string) =>
    `/github-app/installations/${encodeURIComponent(installationId?.toString() ?? "null")}/repositories/${encodeURIComponent(owner?.toString() ?? "null")}/${encodeURIComponent(repo?.toString() ?? "null")}/branches`;
}
