/**
 * @packageDocumentation
 * @module api.functional.github_app.installations.repositories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { GithubRepositoryResponseDto } from "../../../../structures/GithubRepositoryResponseDto";

export * as branches from "./branches/index";

/**
 * @tag github-app
 * @summary GitHub App Installation의 리포지토리 목록 조회
 * @throws 401 인증 실패
 * @throws 404 Installation을 찾을 수 없음
 * @controller GithubAppController.getInstallationRepositories
 * @path GET /github-app/installations/:installationId/repositories
 * @accessor api.functional.github_app.installations.repositories.getInstallationRepositories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getInstallationRepositories(
  connection: IConnection,
  installationId: string,
): Promise<getInstallationRepositories.Output> {
  return PlainFetcher.fetch(connection, {
    ...getInstallationRepositories.METADATA,
    template: getInstallationRepositories.METADATA.path,
    path: getInstallationRepositories.path(installationId),
  });
}
export namespace getInstallationRepositories {
  export type Output = GithubRepositoryResponseDto[];

  export const METADATA = {
    method: "GET",
    path: "/github-app/installations/:installationId/repositories",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (installationId: string) =>
    `/github-app/installations/${encodeURIComponent(installationId?.toString() ?? "null")}/repositories`;
}
