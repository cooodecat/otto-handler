/**
 * @packageDocumentation
 * @module api.functional.test_logs.executions.buffer
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { Recordstringunknown } from "../../../../structures/Recordstringunknown";

/**
 * @controller TestLogsController.getBufferedLogs
 * @path GET /test-logs/executions/:id/buffer
 * @accessor api.functional.test_logs.executions.buffer.getBufferedLogs
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getBufferedLogs(
  connection: IConnection,
  executionId: string,
): Promise<getBufferedLogs.Output> {
  return PlainFetcher.fetch(connection, {
    ...getBufferedLogs.METADATA,
    template: getBufferedLogs.METADATA.path,
    path: getBufferedLogs.path(executionId),
  });
}
export namespace getBufferedLogs {
  export type Output = Recordstringunknown;

  export const METADATA = {
    method: "GET",
    path: "/test-logs/executions/:id/buffer",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (executionId: string) =>
    `/test-logs/executions/${encodeURIComponent(executionId?.toString() ?? "null")}/buffer`;
}
